require('dotenv').config()
const Sequelize = require('sequelize')

const sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USERNAME, process.env.DB_PASSWORD, {
    host: process.env.DB_HOST,
    dialect: process.env.DB_DIALECT,
    logging: false,
    dialectOptions: {
        dateStrings: true,
        typeCast: true,
    },
    pool: {
        max: 100,
        min: 0,
        acquire: '30000',
        idle: '10000',
    },
    timezone: process.env.TIME_DIFF,
})

const db = {}
db.Sequelize = Sequelize
db.sequelize = sequelize

// All models
db.sessions = require('./session.model.js')(sequelize, Sequelize)
db.tamper_details = require('./tamperDetails.model')(sequelize, Sequelize)
db.users = require('./user.model.js')(sequelize, Sequelize)
db.organizations = require('./organization.model.js')(sequelize, Sequelize)
db.participants = require('./participant.model.js')(sequelize, Sequelize)
db.project_alerts = require('./projectalerts.model.js')(sequelize, Sequelize)
db.participant_categories = require('./participantcategory.model.js')(sequelize, Sequelize)
db.event_categories = require('./eventcategory.model.js')(sequelize, Sequelize)
db.project_temp_events = require('./projecttempevent.model.js')(sequelize, Sequelize)
db.sealing_details = require('./sealingdetail.model.js')(sequelize, Sequelize)
db.document_categories = require('./documentcategory.model.js')(sequelize, Sequelize)
db.roads = require('./road.model.js')(sequelize, Sequelize)
db.nft = require('./nft.model.js')(sequelize, Sequelize)
db.stations = require('./station.model.js')(sequelize, Sequelize)
db.requestpurpose = require('./requestpurpose.model.js')(sequelize, Sequelize)
db.items = require('./item.model.js')(sequelize, Sequelize)
db.groups = require('./group.model.js')(sequelize, Sequelize)
db.devices = require('./device.model.js')(sequelize, Sequelize)
db.device_vendors = require('./devicevendor.model.js')(sequelize, Sequelize)
db.trucks = require('./truck.model.js')(sequelize, Sequelize)
db.assets_categories = require('./assets_categories.model.js')(sequelize, Sequelize)
db.containers = require('./container.model.js')(sequelize, Sequelize)
db.apikey = require('./apikey.model.js')(sequelize, Sequelize)
db.events = require('./event.model.js')(sequelize, Sequelize)
db.projects = require('./project.model.js')(sequelize, Sequelize)
db.project_categories = require('./projectcategory.model.js')(sequelize, Sequelize)
db.project_participants = require('./projectparticipant.model.js')(sequelize, Sequelize)
db.project_users = require('./projectuser.model.js')(sequelize, Sequelize)
db.project_selections = require('./projectselection.model.js')(sequelize, Sequelize)
db.project_roads = require('./projectroad.model.js')(sequelize, Sequelize)
db.project_events = require('./projectevent.model.js')(sequelize, Sequelize)
db.user_hidden_events = require('./userhiddenevents.model.js')(sequelize, Sequelize)
db.project_sub_events = require('./projectsubevents.model.js')(sequelize, Sequelize)
db.selection_devices = require('./selectiondevice.model.js')(sequelize, Sequelize)
db.selection_items = require('./selectionitem.model.js')(sequelize, Sequelize)
db.selection_containers = require('./selectioncontainer.model.js')(sequelize, Sequelize)
db.selection_trucks = require('./selectiontruck.model.js')(sequelize, Sequelize)
db.selection_groups = require('./selectiongroup.model.js')(sequelize, Sequelize)
db.project_event_users = require('./projecteventuser.model.js')(sequelize, Sequelize)
db.project_event_comments = require('./projecteventcomment.model.js')(sequelize, Sequelize)
db.project_comment_status = require('./projecteventstatus.model.js')(sequelize, Sequelize)
db.document_accepted_users = require('./documentaccepteduser.model.js')(sequelize, Sequelize)
db.document_seen_users = require('./documentseenuser.model.js')(sequelize, Sequelize)
db.event_document_users = require('./eventdocumentuser.model.js')(sequelize, Sequelize)
db.event_accept_document_users = require('./eventacceptdocumentuser.model.js')(sequelize, Sequelize)
db.station_border_info = require('./stationborderinfo.model.js')(sequelize, Sequelize)
db.project_folders = require('./projectfolder.model.js')(sequelize, Sequelize)
db.location_logs = require('./locationlog.model.js')(sequelize, Sequelize)
db.humidity_logs = require('./humiditylog.model.js')(sequelize, Sequelize)
db.temperature_logs = require('./temperaturelog.model.js')(sequelize, Sequelize)
db.project_event_categories = require('./projecteventcategory.model.js')(sequelize, Sequelize)
db.project_document_categories = require('./projectdocumentcategory.model.js')(sequelize, Sequelize)
db.project_participant_categories = require('./projectparticipantcategory.model.js')(sequelize, Sequelize)
db.device_api_logs = require('./deviceapilog.model.js')(sequelize, Sequelize)
db.workers = require('./worker.model.js')(sequelize, Sequelize)
db.roles = require('./role.model.js')(sequelize, Sequelize)
db.user_types = require('./user_type.model.js')(sequelize, Sequelize)
db.submission_requests = require('./submissionrequest.model.js')(sequelize, Sequelize)
db.submission_request_recipients = require('./submissionrequestrecipient.model.js')(sequelize, Sequelize)
db.submission_request_participants = require('./submissionrequestparticipant.model.js')(sequelize, Sequelize)
db.submission_request_document_participants = require('./submissionrequestdocumentparticipant.model.js')(sequelize, Sequelize)
db.temp_number_verification = require('./tempnumberverification.model.js')(sequelize, Sequelize)
db.temp_email_verification = require('./tempemailverification.model.js')(sequelize, Sequelize)
db.notification_settings = require('./notificationsetting.model.js')(sequelize, Sequelize)
db.notifications = require('./notification.model.js')(sequelize, Sequelize)
db.notification_setting_documents = require('./notificationsettingdocument.model.js')(sequelize, Sequelize)
db.notification_setting_events = require('./notificationsettingevent.model.js')(sequelize, Sequelize)
db.notification_setting_organizations = require('./notificationsettingorganization.model.js')(sequelize, Sequelize)
db.field_user_types = require('./fieldusertype.model')(sequelize, Sequelize)
db.user_titles = require('./user_title.model')(sequelize, Sequelize)
db.states = require('./states.model')(sequelize, Sequelize)
db.temp_network_events = require('./tempnetworkevent.model')(sequelize, Sequelize)
db.approved_by = require('./organizationapprovals.model')(sequelize, Sequelize)
db.invitation = require('./invitation.model')(sequelize, Sequelize)
db.document_type = require('./documenttype.model')(sequelize, Sequelize)
db.user_document_type = require('./userDocumentType.model')(sequelize, Sequelize)
db.pdc_organizations = require('./pdcorganization.model')(sequelize, Sequelize)
db.project_pdc_categories = require('./projectpdccategory.model')(sequelize, Sequelize)
db.pdc_selections = require('./pdcselection.model.js')(sequelize, Sequelize)
db.organization_categories = require('./organizationcategories.model.js')(sequelize, Sequelize)
db.project_pdc_category_events = require('./projectpdccategoryevents.model')(sequelize, Sequelize)
db.project_sidebar_folders = require('./project_sidebar_folders.js')(sequelize, Sequelize)
db.user_agreement = require('./useragreement.model')(sequelize, Sequelize)
db.security_questions = require('./securityquestions.model')(sequelize, Sequelize)
db.user_security_answers = require('./usersecurityanswers.modal')(sequelize, Sequelize)
db.delete_approval = require('./delete-approval.model')(sequelize, Sequelize)
db.data_usage_polices = require('./datausagepolicy.model')(sequelize, Sequelize)
db.policy_required_data = require('./policyrequireddata.model')(sequelize, Sequelize)
db.policy_accesses = require('./policyaccess.model')(sequelize, Sequelize)
db.smart_contract_github_access = require('./smartcontractgithubaccess.model')(sequelize, Sequelize)
db.channel_github_details = require('./channelgithubdetails.model')(sequelize, Sequelize)
db.smart_contract_proposal_channel = require('./smartcontractproposalchannel.model')(sequelize, Sequelize)
db.subscription = require('./subscription.model')(sequelize, Sequelize)
db.plan_inclusion = require('./plan_inclusion.model')(sequelize, Sequelize)
db.integrity_matrix = require('./integrity-matrix.model')(sequelize, Sequelize)
db.integrity_matrix_relations = require('./integrity-matrix-relations')(sequelize, Sequelize)
db.project_event_image = require('./projecteventimage.model')(sequelize, Sequelize)
db.project_event_assets = require('./projecteventassets.model')(sequelize, Sequelize)
db.inventory_assets = require('./inventoryassets.model')(sequelize, Sequelize)
db.assets_quantities = require('./assets-quantities.model')(sequelize, Sequelize)

// Server Performance
db.server_performance = require('./server_performance.model.js')(sequelize, Sequelize)
db.privacy_policy = require('./privacy_policy.model.js')(sequelize, Sequelize)
db.form_builder = require('./form_builder.model')(sequelize, Sequelize)
db.form_options = require('./form_options.model')(sequelize, Sequelize)
db.form_answers = require('./formbuilderanswers.model')(sequelize, Sequelize)
db.countries = require('./countries.model.js')(sequelize, Sequelize)
db.cities = require('./cities.model.js')(sequelize, Sequelize)
db.user_data_requests = require('./userdatarequest.model.js')(sequelize, Sequelize)
db.event_translations = require('./eventtranslations.model.js')(sequelize, Sequelize)
db.temp_org_approve = require('./temporgapprove.model.js')(sequelize, Sequelize)
db.organization_type = require('./organization_type.model')(sequelize, Sequelize)
db.organization_documents = require('./organizationdocuments.model')(sequelize, Sequelize)
db.languages = require('./language.model.js')(sequelize, Sequelize)
db.pdc_orgs = require('./pdcorgs.model')(sequelize, Sequelize)
db.pdc_participants = require('./pdcparticipants.model')(sequelize, Sequelize)
db.user_github_details = require('./userGithubDetails.model')(sequelize, Sequelize)
db.subscription = require('./subscription.model')(sequelize, Sequelize)
db.plan_inclusion = require('./plan_inclusion.model')(sequelize, Sequelize)
db.device_contract = require('./deviceContract.model')(sequelize, Sequelize)
db.device_contract_usage = require('./deviceContractUsage.model')(sequelize, Sequelize)
db.pdc_request = require('./pdcrequest.model')(sequelize, Sequelize)
db.pdc_org_approvals = require('./pdcorgapprovals.model')(sequelize, Sequelize)

// Associations
db.users.hasMany(db.project_pdc_categories, { foreignKey: 'user_id' })
db.project_pdc_categories.belongsTo(db.users, { foreignKey: 'user_id' })
db.project_participant_categories.belongsTo(db.participant_categories, { foreignKey: 'participant_category_id' })
db.participant_categories.hasMany(db.project_participant_categories, { foreignKey: 'participant_category_id' })

db.requestpurpose.hasMany(db.data_usage_polices, { foreignKey: 'purpose_id' })
db.data_usage_polices.belongsTo(db.requestpurpose, { foreignKey: 'purpose_id' })
db.data_usage_polices.hasMany(db.policy_required_data, { foreignKey: 'policy_id' })
db.data_usage_polices.hasMany(db.policy_accesses, { foreignKey: 'policy_id' })
db.policy_required_data.belongsTo(db.data_usage_polices, { foreignKey: 'policy_id' })
db.policy_accesses.belongsTo(db.data_usage_polices, { foreignKey: 'policy_id' })
db.projects.hasMany(db.project_sidebar_folders, { foreignKey: 'project_id' })
db.users.hasMany(db.project_sidebar_folders, { foreignKey: 'user_id' })
db.organization_documents.belongsTo(db.document_type, { foreignKey: 'type_id' })
db.field_user_types.hasMany(db.workers, { foreignKey: 'role_id' })
db.workers.belongsTo(db.field_user_types, { foreignKey: 'role_id' })
db.notifications.belongsTo(db.users, { foreignKey: 'from' })
db.notifications.belongsTo(db.events, { foreignKey: 'event_id', targetKey: 'uniqId' })
db.notifications.belongsTo(db.projects, { foreignKey: 'project_id' })
db.notifications.belongsTo(db.items, { foreignKey: 'item_id' })
db.notifications.belongsTo(db.project_events, { foreignKey: 'project_event_id' })
db.submission_requests.hasMany(db.submission_request_recipients, { foreignKey: 'submission_id' })
db.submission_request_recipients.belongsTo(db.submission_requests, { foreignKey: 'submission_id' })
db.submission_request_recipients.belongsTo(db.workers, { foreignKey: 'worker_id' })
db.submission_requests.hasMany(db.submission_request_participants, { foreignKey: 'submission_id' })
db.submission_requests.hasMany(db.submission_request_document_participants, { foreignKey: 'submission_id' })
db.submission_request_participants.belongsTo(db.submission_requests, { foreignKey: 'submission_id' })
db.submission_request_participants.belongsTo(db.organizations, { foreignKey: 'participant_id' })
db.submission_request_document_participants.belongsTo(db.submission_requests, { foreignKey: 'submission_id' })
db.submission_request_document_participants.belongsTo(db.organizations, { foreignKey: 'participant_id' })
db.submission_requests.belongsTo(db.workers, { foreignKey: 'worker_id' })
db.submission_requests.belongsTo(db.projects, { foreignKey: 'project_id' })
db.submission_requests.belongsTo(db.containers, { foreignKey: 'container_id' })
db.submission_requests.belongsTo(db.items, { foreignKey: 'item_id' })
db.submission_requests.belongsTo(db.events, { foreignKey: 'event_id' })
db.submission_requests.belongsTo(db.users, { foreignKey: 'user_id' })
db.submission_requests.belongsTo(db.project_events, { foreignKey: 'project_event_id' })
db.project_categories.hasMany(db.project_event_categories, { foreignKey: 'project_category_id' })
db.project_event_categories.belongsTo(db.project_categories, { foreignKey: 'project_category_id' })
db.project_event_categories.belongsTo(db.event_categories, { foreignKey: 'event_category_id' })
db.project_categories.hasMany(db.project_document_categories, { foreignKey: 'project_category_id' })
db.project_categories.hasMany(db.project_participant_categories, { foreignKey: 'project_category_id' })
db.project_document_categories.belongsTo(db.project_categories, { foreignKey: 'project_category_id' })
db.project_participant_categories.belongsTo(db.project_categories, { foreignKey: 'project_category_id' })
db.project_document_categories.belongsTo(db.document_categories, { foreignKey: 'document_category_id' })
db.project_participant_categories.belongsTo(db.participant_categories, { foreignKey: 'participant_category_id' })
db.event_categories.hasMany(db.events, { foreignKey: 'event_category_id' })
db.document_categories.hasMany(db.events, { foreignKey: 'event_category_id' })
db.containers.hasMany(db.project_events, { foreignKey: 'container_id', as: 'temp_alert' })
db.containers.hasMany(db.project_events, { foreignKey: 'container_id', as: 'hum_alert' })
db.containers.hasMany(db.sealing_details, { foreignKey: 'container_id', as: 'sealing_alert' })
db.containers.hasMany(db.sealing_details, { foreignKey: 'container_id' })
db.items.hasMany(db.project_events, { foreignKey: 'item_id', as: 'temp_alerts' })
db.items.hasMany(db.project_events, { foreignKey: 'item_id', as: 'hum_alerts' })
db.items.hasMany(db.sealing_details, { foreignKey: 'item_id', as: 'sealing_alerts' })
db.items.hasMany(db.sealing_details, { foreignKey: 'item_id' })
db.users.belongsTo(db.organizations, { foreignKey: 'organization_id' })
db.users.belongsTo(db.roles, { foreignKey: 'role_id' })
db.users.belongsTo(db.user_titles, { foreignKey: 'title_id' })
db.organizations.belongsTo(db.countries, { foreignKey: 'country_id' })
db.organizations.belongsTo(db.cities, { foreignKey: 'city_id' })
db.organizations.belongsTo(db.states, { foreignKey: 'state_id' })
db.organizations.belongsTo(db.document_type, { foreignKey: 'id' })
db.organizations.hasMany(db.users, { foreignKey: 'organization_id' })
db.organizations.belongsTo(db.user_types, { foreignKey: 'type_id' })
db.organizations.hasMany(db.approved_by, { foreignKey: 'organization_id' })
db.organizations.hasMany(db.organization_documents, { foreignKey: 'organization_id', as: 'documents' })
db.organizations.hasOne(db.subscription, { foreignKey: 'organization_id' })

db.approved_by.belongsTo(db.organizations, { foreignKey: 'organization_id', as: 'orgnization' })
db.approved_by.belongsTo(db.organizations, { foreignKey: 'approved_by', as: 'approver' })
db.invitation.belongsTo(db.organizations, { foreignKey: 'invited_by' })
db.projects.hasMany(db.project_selections, { foreignKey: 'project_id' })
db.project_selections.belongsTo(db.projects, { foreignKey: 'project_id' })
db.projects.hasMany(db.project_roads, { foreignKey: 'project_id' })
db.projects.hasMany(db.project_participants, { foreignKey: 'project_id' })
db.project_participants.belongsTo(db.organizations, { foreignKey: 'participant_id' })
db.project_participants.belongsTo(db.projects, { foreignKey: 'project_id' })
db.projects.hasMany(db.project_users, { foreignKey: 'project_id' })
db.project_users.belongsTo(db.users, { foreignKey: 'user_id' })
db.project_users.belongsTo(db.projects, { foreignKey: 'project_id' })
db.project_events.hasMany(db.form_answers, { foreignKey: 'project_event_id' })
db.project_sub_events.belongsTo(db.project_event_users, { foreignKey: 'sub_event_id', targetKey: 'project_event_id' })
db.project_sub_events.belongsTo(db.project_events, { foreignKey: 'sub_event_id' })
db.projects.belongsTo(db.project_categories, { foreignKey: 'project_category_id' })
db.projects.belongsTo(db.users, { foreignKey: 'user_id' })
db.users.hasMany(db.projects, { foreignKey: 'user_id' })
db.project_selections.hasMany(db.selection_items, { foreignKey: 'selection_id' })
db.selection_items.belongsTo(db.items, { foreignKey: 'item_id' })
db.selection_items.belongsTo(db.project_selections, { foreignKey: 'selection_id' })
db.project_selections.hasMany(db.selection_containers, { foreignKey: 'selection_id' })
db.selection_containers.belongsTo(db.containers, { foreignKey: 'container_id' })
db.selection_containers.belongsTo(db.project_selections, { foreignKey: 'selection_id' })
db.project_selections.hasMany(db.selection_groups, { foreignKey: 'selection_id' })
db.selection_groups.belongsTo(db.groups, { foreignKey: 'group_id' })
db.selection_groups.belongsTo(db.project_selections, { foreignKey: 'selection_id' })
db.project_selections.hasMany(db.selection_devices, { foreignKey: 'selection_id' })
db.devices.hasMany(db.selection_devices, { foreignKey: 'device_id' })
db.selection_devices.belongsTo(db.devices, { foreignKey: 'device_id' })
db.selection_devices.belongsTo(db.project_selections, { foreignKey: 'selection_id' })
db.project_selections.hasMany(db.selection_trucks, { foreignKey: 'selection_id' })
db.selection_trucks.belongsTo(db.trucks, { foreignKey: 'truck_id' })
db.selection_trucks.belongsTo(db.project_selections, { foreignKey: 'selection_id' })
db.projects.hasMany(db.project_alerts, { foreignKey: 'project_id' })
db.project_selections.hasMany(db.project_alerts, { foreignKey: 'selection_id' })
db.project_events.hasMany(db.project_event_users, { foreignKey: 'project_event_id' })
db.project_events.hasMany(db.document_accepted_users, { foreignKey: 'project_event_id' })
// db.project_events.hasMany(db.document_seen_users, { foreignKey: 'project_event_id' })
db.project_events.hasMany(db.event_document_users, { foreignKey: 'project_event_id' })
db.project_events.hasMany(db.event_accept_document_users, { foreignKey: 'project_event_id' })
db.project_event_users.belongsTo(db.project_events, { foreignKey: 'project_event_id' })
db.project_event_users.belongsTo(db.users, { foreignKey: 'created_by' })
db.project_event_users.belongsTo(db.organizations, { foreignKey: 'organization_id' })
db.project_folders.hasMany(db.project_folders, { as: 'subFolders', foreignKey: 'parent' })
db.project_folders.hasMany(db.project_folders, { as: 'projects', foreignKey: 'parent' })
db.project_folders.belongsTo(db.projects, { foreignKey: 'project_id' })
db.project_events.belongsTo(db.events, { foreignKey: 'event_id', targetKey: 'uniqId' })
db.project_events.belongsTo(db.roads, { foreignKey: 'road_id' })
db.project_events.belongsTo(db.stations, { foreignKey: 'road_id' })
db.project_events.belongsTo(db.projects, { foreignKey: 'project_id' })
db.project_events.belongsTo(db.groups, { foreignKey: 'group_id' })
db.project_events.belongsTo(db.trucks, { foreignKey: 'truck_id' })
db.project_events.belongsTo(db.containers, { foreignKey: 'container_id' })
db.project_events.belongsTo(db.items, { foreignKey: 'item_id' })
db.project_events.belongsTo(db.devices, { foreignKey: 'device_id' })
db.document_accepted_users.belongsTo(db.project_events, { foreignKey: 'project_event_id' })
db.document_accepted_users.belongsTo(db.organizations, { foreignKey: 'organization_id' })
// db.document_seen_users.belongsTo(db.project_events, { foreignKey: 'project_event_id' })
db.document_seen_users.belongsTo(db.organizations, { foreignKey: 'organization_id' })
db.event_document_users.belongsTo(db.project_events, { foreignKey: 'project_event_id' })
db.event_document_users.belongsTo(db.organizations, { foreignKey: 'organization_id' })
db.event_accept_document_users.belongsTo(db.project_events, { foreignKey: 'project_event_id' })
db.event_accept_document_users.belongsTo(db.organizations, { foreignKey: 'organization_id' })
db.event_accept_document_users.belongsTo(db.users, { foreignKey: 'user_id' })
db.project_roads.belongsTo(db.roads, { foreignKey: 'road_id' })
db.project_roads.belongsTo(db.stations, { foreignKey: 'road_id' })
db.project_event_comments.belongsTo(db.users, { foreignKey: 'user_id' })
db.project_event_comments.hasMany(db.project_comment_status, { foreignKey: 'comment_id' })
db.document_accepted_users.belongsTo(db.users, { foreignKey: 'user_id' })
db.project_comment_status.belongsTo(db.users, { foreignKey: 'user_id' })
db.project_events.belongsTo(db.project_pdc_categories, { foreignKey: 'pdc_id', targetKey: 'pdc_name' })
db.station_border_info.belongsTo(db.roads, { foreignKey: 'station_id' })
db.station_border_info.belongsTo(db.stations, { foreignKey: 'station_id' })
db.roads.hasMany(db.station_border_info, { foreignKey: 'station_id', as: 'inside' })
db.roads.hasMany(db.station_border_info, { foreignKey: 'station_id', as: 'outside' })
db.stations.hasMany(db.station_border_info, { foreignKey: 'station_id', as: 'inside' })
db.stations.hasMany(db.station_border_info, { foreignKey: 'station_id', as: 'outside' })
db.cities.belongsTo(db.countries, { foreignKey: 'country_id' })
db.devices.belongsTo(db.device_vendors, { foreignKey: 'vendor_id' })
db.device_vendors.hasMany(db.devices, { foreignKey: 'vendor_id' })
db.devices.hasMany(db.selection_devices, { foreignKey: 'device_id' })
db.form_builder.belongsTo(db.users, { foreignKey: 'organization_id' })
db.user_data_requests.belongsTo(db.users, { foreignKey: 'user_id', as: 'user' })
db.user_data_requests.belongsTo(db.users, { foreignKey: 'processor_id', as: 'processor' })
db.user_data_requests.belongsTo(db.requestpurpose, { foreignKey: 'purpose_id' })
db.project_pdc_categories.hasMany(db.pdc_organizations, { foreignKey: 'pdc_category_id' })
db.project_categories.hasMany(db.project_pdc_categories, { foreignKey: 'project_category_id' })
db.organizations.belongsTo(db.organization_type, { foreignKey: 'organization_type_id' })
db.events.hasMany(db.event_translations, { foreignKey: 'event_id' })
db.user_document_type.belongsTo(db.user_types, { foreignKey: 'id' })
db.user_document_type.belongsTo(db.document_type, { foreignKey: 'document_type_id' })
db.project_pdc_categories.hasMany(db.pdc_selections, { foreignKey: 'pdc_category_id' })
db.pdc_selections.belongsTo(db.project_pdc_categories, { foreignKey: 'pdc_category_id' })
db.organizations.hasMany(db.organization_categories, { foreignKey: 'org_id' })
db.organization_categories.belongsTo(db.participant_categories, { foreignKey: 'category_id' })
db.participant_categories.hasMany(db.organization_categories, { foreignKey: 'category_id' })
db.organization_categories.belongsTo(db.organizations, { foreignKey: 'org_id' })
db.pdc_organizations.belongsTo(db.organizations, { foreignKey: 'submit_user_id' })
db.pdc_orgs.belongsTo(db.organizations, { foreignKey: 'org_id' })
db.pdc_org_approvals.belongsTo(db.organizations, { foreignKey: 'org_id' })
db.project_events.belongsTo(db.project_pdc_categories, { foreignKey: 'pdc_id', targetKey: 'pdc_name' })
db.project_pdc_categories.hasMany(db.pdc_orgs, { foreignKey: 'pdc_id' })
db.project_pdc_categories.hasMany(db.pdc_org_approvals, { foreignKey: 'pdc_id' })
db.project_pdc_categories.hasMany(db.pdc_participants, { foreignKey: 'pdc_id' })
db.project_pdc_categories.hasMany(db.project_pdc_category_events, { foreignKey: 'project_category_id' })
db.project_pdc_category_events.belongsTo(db.events, { foreignKey: 'event_id', targetKey: 'uniqId' })
db.user_agreement.belongsTo(db.users, { foreignKey: 'user_id' })
db.users.belongsTo(db.countries, { foreignKey: 'country_id' })
db.users.belongsTo(db.cities, { foreignKey: 'city_id' })
db.users.belongsTo(db.states, { foreignKey: 'state_id' })
db.user_security_answers.belongsTo(db.security_questions, { foreignKey: 'question_id' })
db.users.hasMany(db.user_security_answers, { foreignKey: 'user_id' })
db.events.belongsTo(db.event_categories, { foreignKey: 'event_category_id' })
db.events.belongsTo(db.document_categories, { foreignKey: 'event_category_id' })
db.smart_contract_github_access.belongsTo(db.organizations, { foreignKey: 'organization_id' })
db.organizations.hasMany(db.smart_contract_github_access, { foreignKey: 'organization_id' })
db.channel_github_details.belongsTo(db.organizations, { foreignKey: 'host_organization' })
db.organizations.hasMany(db.channel_github_details, { foreignKey: 'host_organization' })
db.smart_contract_github_access.belongsTo(db.channel_github_details, { foreignKey: 'channel_id' })
db.channel_github_details.hasMany(db.smart_contract_github_access, { foreignKey: 'channel_id' })
db.user_github_details.belongsTo(db.users, { foreignKey: 'user_id' })
db.users.hasOne(db.user_github_details, { foreignKey: 'user_id' })
db.smart_contract_proposal_channel.belongsTo(db.channel_github_details, { foreignKey: 'channel_id' })
db.channel_github_details.hasMany(db.smart_contract_proposal_channel, { foreignKey: 'channel_id' })
db.pdc_request.belongsTo(db.users, { foreignKey: 'user_id' })

// subscription
db.subscription.belongsTo(db.organizations, { foreignKey: 'organization_id' })
db.subscription.hasMany(db.plan_inclusion, { foreignKey: 'subscription_id' })

db.integrity_matrix.hasMany(db.integrity_matrix_relations, { foreignKey: 'integrity_matrix_id' })

// Inventory assets
db.inventory_assets.belongsTo(db.assets_categories, { foreignKey: 'asset_category_id' })
db.inventory_assets.belongsTo(db.assets_quantities, { foreignKey: 'asset_code', targetKey: 'asset_code' })
db.inventory_assets.hasMany(db.project_event_assets, { foreignKey: 'assets_code', targetKey: 'asset_code', sourceKey: 'asset_code', as: 'supplier' })
db.inventory_assets.hasMany(db.project_event_assets, { foreignKey: 'assets_code', targetKey: 'asset_code', sourceKey: 'asset_code', as: 'receiver' })
db.project_event_assets.belongsTo(db.organizations, { foreignKey: 'supplier_org_id', as: 'supplier_org' })
db.project_event_assets.belongsTo(db.organizations, { foreignKey: 'receiver_org_id', as: 'receiver_org' })
db.inventory_assets.belongsTo(db.organizations, { foreignKey: 'organization_id' })
db.assets_categories.belongsTo(db.organizations, { foreignKey: 'organization_id' })

// integrity_check
module.exports = db
