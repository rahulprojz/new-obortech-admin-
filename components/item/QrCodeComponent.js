import React, { useContext, useRef, useState, useEffect } from 'react'
import { useFormik } from 'formik'
import * as Yup from 'yup'
import { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'
import LoaderButton from '../../components/common/form-elements/button/LoaderButton'
import FormHelperMessage from '../common/form-elements/formHelperMessage'
import QrCodeContext from '../../store/event/qrCodeContext'
import EventContext from '../../store/event/eventContext'
import { fetchItem, checkQrCode } from '../../lib/api/item'
import { fetchContainerById, checkGroup1ManualCode } from '../../lib/api/container'

import notify from '../../lib/notifier'
import QrCodeHook from './QrCodeHook'
import string from '../../utils/LanguageTranslation'

const QrCodeComponent = ({ usedTo = 'edit', isContainer = false }) => {
    const [manualTextDisplay, setManualTextDisplay] = useState(true)
    const [isTouchedManualText, setIsTouchedManualText] = useState(false)
    const [autoGenerateDisplay, setAutoGenerateDisplay] = useState(true)
    const [item, setItem] = useState(null)
    const [hideButton, setHideButton] = useState(false)
    const [ isLoading , setIsLoading] = useState(false)
    const manualQrInputRef = useRef()
    const generatedQrInputRef = useRef()
    const { modal: qrModal, setModal: setQrModal, randomCode, qrCodeValue, setQrCodeValue } = useContext(QrCodeContext)
    const { itemsNames, containersName } = useContext(EventContext)

    useEffect(() => {
        if (usedTo == 'create') {
            setQrCodeValue(randomCode())
            setManualTextDisplay(false)
        }
    }, [])

    const formik = useFormik({
        initialValues: {
            manualQR: qrCodeValue || '',
        },
        validationSchema: Yup.object({
            manualQR: Yup.string()
                .trim()
                .matches(/^[a-z0-9]+$/i, string.onlyAlphanumric)
                .matches(/^(?!.*["'`\\])/, `${string.manualQRCode} ${string.errors.invalid}`),
        }),
        onSubmit: () => {
            formSubmit()
        },
    })

    const { updateQrCode } = QrCodeHook(qrCodeValue, setQrCodeValue, setQrModal, formik.values.manualQR, isContainer)
    useEffect(() => {
        if (itemsNames?.selected?.value && usedTo == 'edit' && !isContainer) {
            fetchItemDetails()
        }
    }, [itemsNames])

    useEffect(() => {
        if (containersName?.selected?.value && usedTo == 'edit' && isContainer) {
            fetchContainerDetails()
        }
    }, [containersName])

    const fetchContainerDetails = async () => {
        const container = await fetchContainerById({ id: containersName.selected.value })
        if (container.unique_code) {
            setItem(container)
            setQrCodeValue(container.unique_code)
            if (container.manual_code) {
                setHideButton(true)
                formik.setFieldValue('manualQR', container.manual_code)
            }
        }
    }

    const fetchItemDetails = async () => {
        const item = await fetchItem({ id: itemsNames.selected.value })
        if (item) {
            setItem(item)
            setQrCodeValue(item.qr_code)
            if (item.manual_code) {
                setHideButton(true)
            }
            formik.setFieldValue('manualQR', item.manual_code)
        }
    }

    const handleGenerateQrCode = () => {
        if (!isContainer) setManualTextDisplay(false)
        setQrCodeValue(randomCode())
    }

    const handleManuallyEnteredQrCode = (event) => {
        setIsTouchedManualText(true)
        formik.setFieldValue('manualQR', event.target.value)
        // if (!isContainer) {
        //     // setQrCodeValue(manualQrInputRef.current.value)
        //     if (!manualQrInputRef.current.value && isTouchedManualText) {
        //         setAutoGenerateDisplay(true)
        //     } else {
        //         setAutoGenerateDisplay(false)
        //     }
        // }
    }

    const handleManuallyTextCopy = () => {
        if (manualQrInputRef.current.value) {
            navigator.clipboard.writeText(manualQrInputRef.current.value)
            notify(`${string.event.documentHashCopied} ${manualQrInputRef.current.value}`)
        }
    }

    const handleAutoGeneratedTextCopy = () => {
        if (generatedQrInputRef.current.value) {
            navigator.clipboard.writeText(generatedQrInputRef.current.value)
            notify(`${string.event.documentHashCopied} ${generatedQrInputRef.current.value}`)
        }
    }

    const toggle = () => {
        setQrModal((prev) => !prev)
        if (usedTo == 'edit') {
            setQrCodeValue(null)
        }
    }

    const formSubmit = async () => {
        const { code } = await checkQrCode({ qr_code: qrCodeValue })
        if (code == 400) return notify(string.event.qrCodeAlreadyExists)
        toggle()
    }

    const _submitForm = async () => {
        try {
            !formik.errors.manualQR ? setIsLoading(true) : setIsLoading(false)
            if (usedTo == 'edit') {
                if (formik.values.manualQR) {
                    const { code } = await checkGroup1ManualCode({ manual_code: formik.values.manualQR })
                    if (code == 400) return notify(string.event.manualCodeAlreadyExists)
                }
                !formik.errors.manualQR ? updateQrCode() : null
            } else {
                formik.handleSubmit()
            }
        } catch (err) {
            console.log(err)
        }
    }

    return (
        <div>
            <Modal isOpen={qrModal} toggle={toggle} className='customModal'>
                <ModalHeader toggle={toggle} className='justify-content-center'>
                    <h5 className='modal-title text-dark font-weight-bold'>{string.event.code}</h5>
                </ModalHeader>
                <ModalBody>
                    {manualTextDisplay && (
                        <div className='row form-group'>
                            <div className='col-sm-8'>
                                <label htmlFor='purpose' className='col-md-12 col-form-label pl-0'>
                                    {string.event.addManually}
                                </label>
                            </div>
                            <div onClick={handleManuallyTextCopy} className='col-sm-4 text-right'>
                                <label htmlFor='purpose' className='col-form-label cursor-pointer'>
                                    {string.event.copy} <i className='far fa-clone' />
                                </label>
                            </div>
                            <div className='col-sm-12'>
                                <input name='manualQR' maxLength={30} ref={manualQrInputRef} disabled={hideButton} onChange={(event) => handleManuallyEnteredQrCode(event)} value={formik.values.manualQR} className='form-control manualQR' type='text' />
                                {formik.errors.manualQR ? <FormHelperMessage className='err' message={formik.errors.manualQR} /> : null}
                            </div>
                        </div>
                    )}
                    {
                        <div className='row'>
                            <div className='col-sm-8'>
                                <label htmlFor='purpose' className='col-md-12 col-form-label pl-0'>
                                    {string.event.uniqueCode}
                                </label>
                            </div>
                            <div onClick={handleAutoGeneratedTextCopy} className={`col-sm-4 text-right`}>
                                <label htmlFor='purpose' className='col-form-label cursor-pointer'>
                                    {string.event.copy} <i className='far fa-clone' />
                                </label>
                            </div>
                            <div className={!qrCodeValue ? 'col-sm-12' : 'col-sm-12'}>
                                <input ref={generatedQrInputRef} disabled value={qrCodeValue} className='form-control uniqueCode' type='text' />
                            </div>
                            {/* {!qrCodeValue && (
                                <div className='col-sm-3 pl-0'>
                                    <button type='button' className='btn btn-primary' style={{ width: '100%', padding: '4px 0px' }} onClick={handleGenerateQrCode}>
                                        {string.event.generate}
                                    </button>
                                </div>
                            )} */}
                        </div>
                    }
                </ModalBody>
                <ModalFooter className='justify-content-center'>
                    {!hideButton && (
                         <LoaderButton cssClass='btn btn-primary large-btn' type='button' isLoading={isLoading} text= {string.event.done} onClick={_submitForm} />
                    )}
                </ModalFooter>
            </Modal>
        </div>
    )
}

export default QrCodeComponent
